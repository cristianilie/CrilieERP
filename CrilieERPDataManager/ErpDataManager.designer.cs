#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CrilieERPDataManager
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CrilieErpDatabase")]
	public partial class ErpDataManagerDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBusinessPartnerType(BusinessPartnerType instance);
    partial void UpdateBusinessPartnerType(BusinessPartnerType instance);
    partial void DeleteBusinessPartnerType(BusinessPartnerType instance);
    partial void InsertCustomPriceList(CustomPriceList instance);
    partial void UpdateCustomPriceList(CustomPriceList instance);
    partial void DeleteCustomPriceList(CustomPriceList instance);
    partial void InsertInvoicedProduct(InvoicedProduct instance);
    partial void UpdateInvoicedProduct(InvoicedProduct instance);
    partial void DeleteInvoicedProduct(InvoicedProduct instance);
    partial void InsertBusinessPartner(BusinessPartner instance);
    partial void UpdateBusinessPartner(BusinessPartner instance);
    partial void DeleteBusinessPartner(BusinessPartner instance);
    partial void InsertOrder(Order instance);
    partial void UpdateOrder(Order instance);
    partial void DeleteOrder(Order instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertProductStock(ProductStock instance);
    partial void UpdateProductStock(ProductStock instance);
    partial void DeleteProductStock(ProductStock instance);
    #endregion
		
		public ErpDataManagerDataContext() : 
				base(global::CrilieERPDataManager.Properties.Settings.Default.CrilieErpDatabaseConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ErpDataManagerDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ErpDataManagerDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ErpDataManagerDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ErpDataManagerDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<BusinessPartnerType> BusinessPartnerTypes
		{
			get
			{
				return this.GetTable<BusinessPartnerType>();
			}
		}
		
		public System.Data.Linq.Table<CustomPriceList> CustomPriceLists
		{
			get
			{
				return this.GetTable<CustomPriceList>();
			}
		}
		
		public System.Data.Linq.Table<InvoicedProduct> InvoicedProducts
		{
			get
			{
				return this.GetTable<InvoicedProduct>();
			}
		}
		
		public System.Data.Linq.Table<BusinessPartner> BusinessPartners
		{
			get
			{
				return this.GetTable<BusinessPartner>();
			}
		}
		
		public System.Data.Linq.Table<Order> Orders
		{
			get
			{
				return this.GetTable<Order>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<ProductStock> ProductStocks
		{
			get
			{
				return this.GetTable<ProductStock>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BusinessPartnerType")]
	public partial class BusinessPartnerType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _TypeName;
		
		private EntitySet<BusinessPartner> _BusinessPartners;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    #endregion
		
		public BusinessPartnerType()
		{
			this._BusinessPartners = new EntitySet<BusinessPartner>(new Action<BusinessPartner>(this.attach_BusinessPartners), new Action<BusinessPartner>(this.detach_BusinessPartners));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BusinessPartnerType_BusinessPartner", Storage="_BusinessPartners", ThisKey="Id", OtherKey="Type")]
		public EntitySet<BusinessPartner> BusinessPartners
		{
			get
			{
				return this._BusinessPartners;
			}
			set
			{
				this._BusinessPartners.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BusinessPartners(BusinessPartner entity)
		{
			this.SendPropertyChanging();
			entity.BusinessPartnerType = this;
		}
		
		private void detach_BusinessPartners(BusinessPartner entity)
		{
			this.SendPropertyChanging();
			entity.BusinessPartnerType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CustomPriceList")]
	public partial class CustomPriceList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ProductId;
		
		private decimal _CustomSalesPrice;
		
		private EntitySet<BusinessPartner> _BusinessPartners;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnCustomSalesPriceChanging(decimal value);
    partial void OnCustomSalesPriceChanged();
    #endregion
		
		public CustomPriceList()
		{
			this._BusinessPartners = new EntitySet<BusinessPartner>(new Action<BusinessPartner>(this.attach_BusinessPartners), new Action<BusinessPartner>(this.detach_BusinessPartners));
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="Int NOT NULL")]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomSalesPrice", DbType="Money NOT NULL")]
		public decimal CustomSalesPrice
		{
			get
			{
				return this._CustomSalesPrice;
			}
			set
			{
				if ((this._CustomSalesPrice != value))
				{
					this.OnCustomSalesPriceChanging(value);
					this.SendPropertyChanging();
					this._CustomSalesPrice = value;
					this.SendPropertyChanged("CustomSalesPrice");
					this.OnCustomSalesPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomPriceList_BusinessPartner", Storage="_BusinessPartners", ThisKey="Id", OtherKey="CustomPriceListId")]
		public EntitySet<BusinessPartner> BusinessPartners
		{
			get
			{
				return this._BusinessPartners;
			}
			set
			{
				this._BusinessPartners.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_CustomPriceList", Storage="_Product", ThisKey="ProductId", OtherKey="Id", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.CustomPriceLists.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.CustomPriceLists.Add(this);
						this._ProductId = value.Id;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BusinessPartners(BusinessPartner entity)
		{
			this.SendPropertyChanging();
			entity.CustomPriceList = this;
		}
		
		private void detach_BusinessPartners(BusinessPartner entity)
		{
			this.SendPropertyChanging();
			entity.CustomPriceList = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InvoicedProducts")]
	public partial class InvoicedProduct : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ProductId;
		
		private int _OrderId;
		
		private int _InvoicedQuantity;
		
		private decimal _InvoicePrice;
		
		private EntityRef<Order> _Order;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnOrderIdChanging(int value);
    partial void OnOrderIdChanged();
    partial void OnInvoicedQuantityChanging(int value);
    partial void OnInvoicedQuantityChanged();
    partial void OnInvoicePriceChanging(decimal value);
    partial void OnInvoicePriceChanged();
    #endregion
		
		public InvoicedProduct()
		{
			this._Order = default(EntityRef<Order>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="Int NOT NULL")]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderId", DbType="Int NOT NULL")]
		public int OrderId
		{
			get
			{
				return this._OrderId;
			}
			set
			{
				if ((this._OrderId != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIdChanging(value);
					this.SendPropertyChanging();
					this._OrderId = value;
					this.SendPropertyChanged("OrderId");
					this.OnOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoicedQuantity", DbType="Int NOT NULL")]
		public int InvoicedQuantity
		{
			get
			{
				return this._InvoicedQuantity;
			}
			set
			{
				if ((this._InvoicedQuantity != value))
				{
					this.OnInvoicedQuantityChanging(value);
					this.SendPropertyChanging();
					this._InvoicedQuantity = value;
					this.SendPropertyChanged("InvoicedQuantity");
					this.OnInvoicedQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoicePrice", DbType="Money NOT NULL")]
		public decimal InvoicePrice
		{
			get
			{
				return this._InvoicePrice;
			}
			set
			{
				if ((this._InvoicePrice != value))
				{
					this.OnInvoicePriceChanging(value);
					this.SendPropertyChanging();
					this._InvoicePrice = value;
					this.SendPropertyChanged("InvoicePrice");
					this.OnInvoicePriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_InvoicedProduct", Storage="_Order", ThisKey="OrderId", OtherKey="Id", IsForeignKey=true)]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.InvoicedProducts.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.InvoicedProducts.Add(this);
						this._OrderId = value.Id;
					}
					else
					{
						this._OrderId = default(int);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_InvoicedProduct", Storage="_Product", ThisKey="ProductId", OtherKey="Id", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.InvoicedProducts.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.InvoicedProducts.Add(this);
						this._ProductId = value.Id;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BusinessPartner")]
	public partial class BusinessPartner : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _LegalInfo;
		
		private string _ContactInfo;
		
		private string _DeliveryInfo;
		
		private int _Type;
		
		private System.Nullable<int> _PaymentTerms;
		
		private System.Nullable<int> _CustomPriceListId;
		
		private System.Nullable<int> _IsMasterPartner;
		
		private EntitySet<Order> _Orders;
		
		private EntitySet<Order> _Orders1;
		
		private EntityRef<CustomPriceList> _CustomPriceList;
		
		private EntityRef<BusinessPartnerType> _BusinessPartnerType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLegalInfoChanging(string value);
    partial void OnLegalInfoChanged();
    partial void OnContactInfoChanging(string value);
    partial void OnContactInfoChanged();
    partial void OnDeliveryInfoChanging(string value);
    partial void OnDeliveryInfoChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnPaymentTermsChanging(System.Nullable<int> value);
    partial void OnPaymentTermsChanged();
    partial void OnCustomPriceListIdChanging(System.Nullable<int> value);
    partial void OnCustomPriceListIdChanged();
    partial void OnIsMasterPartnerChanging(System.Nullable<int> value);
    partial void OnIsMasterPartnerChanged();
    #endregion
		
		public BusinessPartner()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			this._Orders1 = new EntitySet<Order>(new Action<Order>(this.attach_Orders1), new Action<Order>(this.detach_Orders1));
			this._CustomPriceList = default(EntityRef<CustomPriceList>);
			this._BusinessPartnerType = default(EntityRef<BusinessPartnerType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(300) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LegalInfo", DbType="VarChar(350) NOT NULL", CanBeNull=false)]
		public string LegalInfo
		{
			get
			{
				return this._LegalInfo;
			}
			set
			{
				if ((this._LegalInfo != value))
				{
					this.OnLegalInfoChanging(value);
					this.SendPropertyChanging();
					this._LegalInfo = value;
					this.SendPropertyChanged("LegalInfo");
					this.OnLegalInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactInfo", DbType="VarChar(450) NOT NULL", CanBeNull=false)]
		public string ContactInfo
		{
			get
			{
				return this._ContactInfo;
			}
			set
			{
				if ((this._ContactInfo != value))
				{
					this.OnContactInfoChanging(value);
					this.SendPropertyChanging();
					this._ContactInfo = value;
					this.SendPropertyChanged("ContactInfo");
					this.OnContactInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeliveryInfo", DbType="VarChar(450)")]
		public string DeliveryInfo
		{
			get
			{
				return this._DeliveryInfo;
			}
			set
			{
				if ((this._DeliveryInfo != value))
				{
					this.OnDeliveryInfoChanging(value);
					this.SendPropertyChanging();
					this._DeliveryInfo = value;
					this.SendPropertyChanged("DeliveryInfo");
					this.OnDeliveryInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					if (this._BusinessPartnerType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentTerms", DbType="Int")]
		public System.Nullable<int> PaymentTerms
		{
			get
			{
				return this._PaymentTerms;
			}
			set
			{
				if ((this._PaymentTerms != value))
				{
					this.OnPaymentTermsChanging(value);
					this.SendPropertyChanging();
					this._PaymentTerms = value;
					this.SendPropertyChanged("PaymentTerms");
					this.OnPaymentTermsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomPriceListId", DbType="Int")]
		public System.Nullable<int> CustomPriceListId
		{
			get
			{
				return this._CustomPriceListId;
			}
			set
			{
				if ((this._CustomPriceListId != value))
				{
					if (this._CustomPriceList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomPriceListIdChanging(value);
					this.SendPropertyChanging();
					this._CustomPriceListId = value;
					this.SendPropertyChanged("CustomPriceListId");
					this.OnCustomPriceListIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsMasterPartner", DbType="Int")]
		public System.Nullable<int> IsMasterPartner
		{
			get
			{
				return this._IsMasterPartner;
			}
			set
			{
				if ((this._IsMasterPartner != value))
				{
					this.OnIsMasterPartnerChanging(value);
					this.SendPropertyChanging();
					this._IsMasterPartner = value;
					this.SendPropertyChanged("IsMasterPartner");
					this.OnIsMasterPartnerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BusinessPartner_Order", Storage="_Orders", ThisKey="Id", OtherKey="CustomerId")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BusinessPartner_Order1", Storage="_Orders1", ThisKey="Id", OtherKey="VendorId")]
		public EntitySet<Order> Orders1
		{
			get
			{
				return this._Orders1;
			}
			set
			{
				this._Orders1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomPriceList_BusinessPartner", Storage="_CustomPriceList", ThisKey="CustomPriceListId", OtherKey="Id", IsForeignKey=true)]
		public CustomPriceList CustomPriceList
		{
			get
			{
				return this._CustomPriceList.Entity;
			}
			set
			{
				CustomPriceList previousValue = this._CustomPriceList.Entity;
				if (((previousValue != value) 
							|| (this._CustomPriceList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CustomPriceList.Entity = null;
						previousValue.BusinessPartners.Remove(this);
					}
					this._CustomPriceList.Entity = value;
					if ((value != null))
					{
						value.BusinessPartners.Add(this);
						this._CustomPriceListId = value.Id;
					}
					else
					{
						this._CustomPriceListId = default(Nullable<int>);
					}
					this.SendPropertyChanged("CustomPriceList");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BusinessPartnerType_BusinessPartner", Storage="_BusinessPartnerType", ThisKey="Type", OtherKey="Id", IsForeignKey=true)]
		public BusinessPartnerType BusinessPartnerType
		{
			get
			{
				return this._BusinessPartnerType.Entity;
			}
			set
			{
				BusinessPartnerType previousValue = this._BusinessPartnerType.Entity;
				if (((previousValue != value) 
							|| (this._BusinessPartnerType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BusinessPartnerType.Entity = null;
						previousValue.BusinessPartners.Remove(this);
					}
					this._BusinessPartnerType.Entity = value;
					if ((value != null))
					{
						value.BusinessPartners.Add(this);
						this._Type = value.Id;
					}
					else
					{
						this._Type = default(int);
					}
					this.SendPropertyChanged("BusinessPartnerType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.BusinessPartner = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.BusinessPartner = null;
		}
		
		private void attach_Orders1(Order entity)
		{
			this.SendPropertyChanging();
			entity.BusinessPartner1 = this;
		}
		
		private void detach_Orders1(Order entity)
		{
			this.SendPropertyChanging();
			entity.BusinessPartner1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Order]")]
	public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _OrderInfo;
		
		private int _CustomerId;
		
		private int _VendorId;
		
		private System.DateTime _DocumentDate;
		
		private System.DateTime _DeliveryDate;
		
		private System.DateTime _DueDate;
		
		private int _IsOpen;
		
		private int _TaxRateId;
		
		private string _Remarks;
		
		private EntitySet<InvoicedProduct> _InvoicedProducts;
		
		private EntityRef<BusinessPartner> _BusinessPartner;
		
		private EntityRef<BusinessPartner> _BusinessPartner1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnOrderInfoChanging(string value);
    partial void OnOrderInfoChanged();
    partial void OnCustomerIdChanging(int value);
    partial void OnCustomerIdChanged();
    partial void OnVendorIdChanging(int value);
    partial void OnVendorIdChanged();
    partial void OnDocumentDateChanging(System.DateTime value);
    partial void OnDocumentDateChanged();
    partial void OnDeliveryDateChanging(System.DateTime value);
    partial void OnDeliveryDateChanged();
    partial void OnDueDateChanging(System.DateTime value);
    partial void OnDueDateChanged();
    partial void OnIsOpenChanging(int value);
    partial void OnIsOpenChanged();
    partial void OnTaxRateIdChanging(int value);
    partial void OnTaxRateIdChanged();
    partial void OnRemarksChanging(string value);
    partial void OnRemarksChanged();
    #endregion
		
		public Order()
		{
			this._InvoicedProducts = new EntitySet<InvoicedProduct>(new Action<InvoicedProduct>(this.attach_InvoicedProducts), new Action<InvoicedProduct>(this.detach_InvoicedProducts));
			this._BusinessPartner = default(EntityRef<BusinessPartner>);
			this._BusinessPartner1 = default(EntityRef<BusinessPartner>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderInfo", DbType="VarChar(100)")]
		public string OrderInfo
		{
			get
			{
				return this._OrderInfo;
			}
			set
			{
				if ((this._OrderInfo != value))
				{
					this.OnOrderInfoChanging(value);
					this.SendPropertyChanging();
					this._OrderInfo = value;
					this.SendPropertyChanged("OrderInfo");
					this.OnOrderInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerId", DbType="Int NOT NULL")]
		public int CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					if (this._BusinessPartner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VendorId", DbType="Int NOT NULL")]
		public int VendorId
		{
			get
			{
				return this._VendorId;
			}
			set
			{
				if ((this._VendorId != value))
				{
					if (this._BusinessPartner1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVendorIdChanging(value);
					this.SendPropertyChanging();
					this._VendorId = value;
					this.SendPropertyChanged("VendorId");
					this.OnVendorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DocumentDate", DbType="Date NOT NULL")]
		public System.DateTime DocumentDate
		{
			get
			{
				return this._DocumentDate;
			}
			set
			{
				if ((this._DocumentDate != value))
				{
					this.OnDocumentDateChanging(value);
					this.SendPropertyChanging();
					this._DocumentDate = value;
					this.SendPropertyChanged("DocumentDate");
					this.OnDocumentDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeliveryDate", DbType="Date NOT NULL")]
		public System.DateTime DeliveryDate
		{
			get
			{
				return this._DeliveryDate;
			}
			set
			{
				if ((this._DeliveryDate != value))
				{
					this.OnDeliveryDateChanging(value);
					this.SendPropertyChanging();
					this._DeliveryDate = value;
					this.SendPropertyChanged("DeliveryDate");
					this.OnDeliveryDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DueDate", DbType="Date NOT NULL")]
		public System.DateTime DueDate
		{
			get
			{
				return this._DueDate;
			}
			set
			{
				if ((this._DueDate != value))
				{
					this.OnDueDateChanging(value);
					this.SendPropertyChanging();
					this._DueDate = value;
					this.SendPropertyChanged("DueDate");
					this.OnDueDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsOpen", DbType="Int NOT NULL")]
		public int IsOpen
		{
			get
			{
				return this._IsOpen;
			}
			set
			{
				if ((this._IsOpen != value))
				{
					this.OnIsOpenChanging(value);
					this.SendPropertyChanging();
					this._IsOpen = value;
					this.SendPropertyChanged("IsOpen");
					this.OnIsOpenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxRateId", DbType="Int NOT NULL")]
		public int TaxRateId
		{
			get
			{
				return this._TaxRateId;
			}
			set
			{
				if ((this._TaxRateId != value))
				{
					this.OnTaxRateIdChanging(value);
					this.SendPropertyChanging();
					this._TaxRateId = value;
					this.SendPropertyChanged("TaxRateId");
					this.OnTaxRateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remarks", DbType="VarChar(300)")]
		public string Remarks
		{
			get
			{
				return this._Remarks;
			}
			set
			{
				if ((this._Remarks != value))
				{
					this.OnRemarksChanging(value);
					this.SendPropertyChanging();
					this._Remarks = value;
					this.SendPropertyChanged("Remarks");
					this.OnRemarksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_InvoicedProduct", Storage="_InvoicedProducts", ThisKey="Id", OtherKey="OrderId")]
		public EntitySet<InvoicedProduct> InvoicedProducts
		{
			get
			{
				return this._InvoicedProducts;
			}
			set
			{
				this._InvoicedProducts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BusinessPartner_Order", Storage="_BusinessPartner", ThisKey="CustomerId", OtherKey="Id", IsForeignKey=true)]
		public BusinessPartner BusinessPartner
		{
			get
			{
				return this._BusinessPartner.Entity;
			}
			set
			{
				BusinessPartner previousValue = this._BusinessPartner.Entity;
				if (((previousValue != value) 
							|| (this._BusinessPartner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BusinessPartner.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._BusinessPartner.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._CustomerId = value.Id;
					}
					else
					{
						this._CustomerId = default(int);
					}
					this.SendPropertyChanged("BusinessPartner");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BusinessPartner_Order1", Storage="_BusinessPartner1", ThisKey="VendorId", OtherKey="Id", IsForeignKey=true)]
		public BusinessPartner BusinessPartner1
		{
			get
			{
				return this._BusinessPartner1.Entity;
			}
			set
			{
				BusinessPartner previousValue = this._BusinessPartner1.Entity;
				if (((previousValue != value) 
							|| (this._BusinessPartner1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BusinessPartner1.Entity = null;
						previousValue.Orders1.Remove(this);
					}
					this._BusinessPartner1.Entity = value;
					if ((value != null))
					{
						value.Orders1.Add(this);
						this._VendorId = value.Id;
					}
					else
					{
						this._VendorId = default(int);
					}
					this.SendPropertyChanged("BusinessPartner1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InvoicedProducts(InvoicedProduct entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_InvoicedProducts(InvoicedProduct entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Product")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<CustomPriceList> _CustomPriceLists;
		
		private EntitySet<InvoicedProduct> _InvoicedProducts;
		
		private EntitySet<ProductStock> _ProductStocks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Product()
		{
			this._CustomPriceLists = new EntitySet<CustomPriceList>(new Action<CustomPriceList>(this.attach_CustomPriceLists), new Action<CustomPriceList>(this.detach_CustomPriceLists));
			this._InvoicedProducts = new EntitySet<InvoicedProduct>(new Action<InvoicedProduct>(this.attach_InvoicedProducts), new Action<InvoicedProduct>(this.detach_InvoicedProducts));
			this._ProductStocks = new EntitySet<ProductStock>(new Action<ProductStock>(this.attach_ProductStocks), new Action<ProductStock>(this.detach_ProductStocks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_CustomPriceList", Storage="_CustomPriceLists", ThisKey="Id", OtherKey="ProductId")]
		public EntitySet<CustomPriceList> CustomPriceLists
		{
			get
			{
				return this._CustomPriceLists;
			}
			set
			{
				this._CustomPriceLists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_InvoicedProduct", Storage="_InvoicedProducts", ThisKey="Id", OtherKey="ProductId")]
		public EntitySet<InvoicedProduct> InvoicedProducts
		{
			get
			{
				return this._InvoicedProducts;
			}
			set
			{
				this._InvoicedProducts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductStock", Storage="_ProductStocks", ThisKey="Id", OtherKey="ProductId")]
		public EntitySet<ProductStock> ProductStocks
		{
			get
			{
				return this._ProductStocks;
			}
			set
			{
				this._ProductStocks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CustomPriceLists(CustomPriceList entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_CustomPriceLists(CustomPriceList entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_InvoicedProducts(InvoicedProduct entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_InvoicedProducts(InvoicedProduct entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ProductStocks(ProductStock entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductStocks(ProductStock entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductStock")]
	public partial class ProductStock : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ProductId;
		
		private System.Nullable<int> _Quantity;
		
		private System.Nullable<int> _Committed;
		
		private System.Nullable<int> _Available;
		
		private System.Nullable<decimal> _Cost;
		
		private System.Nullable<decimal> _DefaultSalesPrice;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void OnCommittedChanging(System.Nullable<int> value);
    partial void OnCommittedChanged();
    partial void OnAvailableChanging(System.Nullable<int> value);
    partial void OnAvailableChanged();
    partial void OnCostChanging(System.Nullable<decimal> value);
    partial void OnCostChanged();
    partial void OnDefaultSalesPriceChanging(System.Nullable<decimal> value);
    partial void OnDefaultSalesPriceChanged();
    #endregion
		
		public ProductStock()
		{
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="Int NOT NULL")]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Committed]", Storage="_Committed", DbType="Int")]
		public System.Nullable<int> Committed
		{
			get
			{
				return this._Committed;
			}
			set
			{
				if ((this._Committed != value))
				{
					this.OnCommittedChanging(value);
					this.SendPropertyChanging();
					this._Committed = value;
					this.SendPropertyChanged("Committed");
					this.OnCommittedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Available", DbType="Int")]
		public System.Nullable<int> Available
		{
			get
			{
				return this._Available;
			}
			set
			{
				if ((this._Available != value))
				{
					this.OnAvailableChanging(value);
					this.SendPropertyChanging();
					this._Available = value;
					this.SendPropertyChanged("Available");
					this.OnAvailableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost", DbType="Money")]
		public System.Nullable<decimal> Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged("Cost");
					this.OnCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultSalesPrice", DbType="Money")]
		public System.Nullable<decimal> DefaultSalesPrice
		{
			get
			{
				return this._DefaultSalesPrice;
			}
			set
			{
				if ((this._DefaultSalesPrice != value))
				{
					this.OnDefaultSalesPriceChanging(value);
					this.SendPropertyChanging();
					this._DefaultSalesPrice = value;
					this.SendPropertyChanged("DefaultSalesPrice");
					this.OnDefaultSalesPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductStock", Storage="_Product", ThisKey="ProductId", OtherKey="Id", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductStocks.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductStocks.Add(this);
						this._ProductId = value.Id;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
